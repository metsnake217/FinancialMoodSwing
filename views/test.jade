    
extends layout

block content

    div(class="container", style="")
        img(src="/images/unknown.png" width="5%", class="logofin1")
        a(href="/login")
            img(src="/images/test1.png" class="logofin")
        input(id="toggle" type="checkbox" class="inputexpand")
        label(for="toggle", class="labelexpand")!= "Create Playlist"
        div(id="expand")
            section
                //h1!= "Create a Playlist"
                p!= "Type a playlist name and click on 'Create'."
                form(id="playlist-form")
                    input(type="text" id="queryplay" value="" class="form-control" placeholder="Type Playlist title")
                    input(type="text" id="createplaylist" class="btn btn-primary boutton" value="Create" style="color: white !important;" onclick="createPlaylist()")
                div(class="messageCreatePlaylist" style="margin-top: 25px;")
        input(id="toggleedit" type="checkbox" class="inputexpandedit")
        label(for="toggleedit", class="labelexpandedit")!= "Edit Playlist"
        div(id="expandedit")
            section
                //h1!= "Edit a Playlist"
                p!= "Select a playlist to load its contents."
                form(id="playlistedit-form")
                    div(id="playlistedit")
                        script(id="playlistedit-template" type="text/x-handlebars-template")
                            <select name="playedit" type="text" id="playedit" class="form-control" style="border-color:#3d9dcb;margin-bottom:10px" placeholder="Select Playlist">
                            <option value="select playlist">Select Playlist</option>{{#each items}}<option value="{{id}}">{{name}}</option>{{/each}}</select>
                            <span style="color: #8a6d3b;float: right;top: -35px;lef;right: 1.5%;position: relative;font-size: 14pt;" class="fa fa-sort"></span>
                    div(id="playlisteditlist")
                        script(id="playlisteditlist-template" type="text/x-handlebars-template")
                            <table><thead><th>Track</th><th>&nbsp;</th></thead><tbody>{{#each items}}<tr><td><a href="{{track.href}}" class="trackedit">{{track.name}}</a></td><td><span id="{{track.id}}" class="fa fa-trash-o trashtrack"></span></td></tr>{{/each}}</table>
        input(id="toggleadd" type="checkbox" class="inputexpandadd")
        label(for="toggleadd", class="labelexpandadd")!= "Add Music"
        div(id="expandadd")
            section
                //h1!= "Add Music"
                p!= "Type an artist name, album or track title. Then, select an existing playlist to add music to based on the metadata provided."
                form(id="search-form")
                    input(style="padding: 10px;height: 60px;font-size: 20pt;color: #8a6d3b !important;" type="text" id="query" value="" class="form-control" placeholder="Type an Artist Name")
                    input(type="submit" id="searchmusic" class="btn btn-primary searchmusic boutton" value="Search")
                
                form(id="playlistfill-form")
                    div(id="playlistres")
                        script(id="playlistres-template" type="text/x-handlebars-template")
                            <p style="margin-top:50px">Select an existing Playlist below and make a wise decision about the music tracks you would want to associate. Then click on "Add to Playlist" button.</p>
                            <p style="width: 150px;padding-left: 30px;" class="checkboxThree1"><input style="position:absolute;left: -9999px;" type="checkbox" id="moodexample" name="moodexample" value="moodexample"  class="moodexample"><label for="moodexample" class="labelcheck1 shadow"></label> Mood is Up</p>
                            <p style="width: 150px;padding-left: 30px;" class="checkboxThree2"><input style="position:absolute;left: -9999px;" type="checkbox" id="moodexample2" name="moodexample2" value="moodexample2"  class="moodexample"><label for="moodexample2" class="labelcheck1 shadow"></label> Mood is Way Up</p>
                            <p style="width: 150px;padding-left: 30px;" class="checkboxThree3"><input style="position:absolute;left: -9999px;" type="checkbox" id="moodexample3" name="moodexampl3" value="moodexample3"  class="moodexample"><label for="moodexample3" class="labelcheck1 shadow"></label> Mood is Down</p>
                            <p style="width: 160px;padding-left: 30px;" class="checkboxThree4"><input style="position:absolute;left: -9999px;" type="checkbox" id="moodexample4" name="moodexample4" value="moodexample4"  class="moodexample"><label for="moodexample4" class="labelcheck1 shadow"></label> Mood is Way Down</p><br/>
                            <select name="playSelect" type="text" id="playSelect" class="form-control" style="" placeholder="Select Playlist">
                            <option value="select playlist">Select Playlist</option>
                            {{#each items}}
                            <option value="{{id}}">{{name}}</option>
                            {{/each}}
                            </select>
                            <span style="" class="fa fa-sort addmusicplaylistsort"></span>
                    div(id="resultsss")
                        script(id="results-template" type="text/x-handlebars-template")
                            {{#if albums.items}}
                            <div class="sectionalbums", style="style=""><h2 style="color: #00bc00 !important;">Pick Albums</h2>
                            {{#each albums.items}}
                            <div style="/*background-image:url({{images.0.url}})*/" data-album-id="{{id}}" class="covering">{{#if images.0.url}}<img data-album-id="{{id}}" src="{{images.0.url}}" width="100px" height="100px" class="cover"/>{{else}}<img data-album-id="{{id}}" src="/images/unknown.png" width="100px" height="100px" class="cover"/>{{/if}}<div><span class="wrap">{{trimString name}}</span></div><div style="display:block;text-align:ccenter;margin:0 auto;"><div style="" class="checkboxThree1"><input style="position:absolute;left: -9999px;" type="checkbox" id="moodup-{{id}}" name="moodup-{{id}}" value="moodup" class="mood"><label for="moodup-{{id}}" class="labelcheck1 shadow"></label></div><div style="" class="checkboxThree2"><input style="position:absolute;left: -9999px;" type="checkbox" id="moodwayup-{{id}}" name="moodwayup-{{id}}" value="moodwayup" class="mood"><label for="moodwayup-{{id}}" class="labelcheck2 shadow"></label></div><div style="" class="checkboxThree3"><input style="position:absolute;left: -9999px;" type="checkbox" id="mooddown-{{id}}" name="mooddown-{{id}}" value="mooddown" class="mood"><label for="mooddown-{{id}}" class="labelcheck3 shadow"></label></div><div style="" class="checkboxThree4"><input style="position:absolute;left: -9999px;" type="checkbox" id="moodwaydown-{{id}}" name="moodwaydown-{{id}}" value="moodwaydown" class="mood"><label for="moodwaydown-{{id}}" class="labelcheck4 shadow"></label></div></div></div>
                            {{/each}}
                            </div>
                            {{/if}}
                            {{#if artists.items}}
                            <div class="sectionartists" style=""><h2 style="color: #00bc00 !important;">Pick Artists</h2>
                            {{#each artists.items}}
                            <div style="/*background-image:url({{images.0.url}})*/" data-album-id="{{id}}" class="covering">{{#if images.0.url}}<img data-album-id="{{id}}" src="{{images.0.url}}" width="100px" height="100px" class="cover"/>{{else}}<img data-album-id="{{id}}" src="/images/unknown.png" width="100px" height="100px" class="cover"/>{{/if}}<div><span class="wrap">{{trimString name}}</span><!--<input type="checkbox" name="add" value="{{id}}" class="add" />--></div><div style="display:block;text-align:center;margin:0 auto;"><div style="" class="checkboxThree1"><input style="position:absolute;left: -9999px;" type="checkbox" id="moodup-{{id}}" name="moodup-{{id}}" value="moodup" class="mood"><label for="moodup-{{id}}" class="labelcheck1 shadow"></label></div><div style="" class="checkboxThree2"><input style="position:absolute;left: -9999px;" type="checkbox" id="moodwayup-{{id}}" name="moodwayup-{{id}}" value="moodwayup" class="mood"><label for="moodwayup-{{id}}" class="labelcheck2 shadow"></label></div><div style="" class="checkboxThree3"><input style="position:absolute;left: -9999px;" type="checkbox" id="mooddown-{{id}}" name="mooddown-{{id}}" value="mooddown" class="mood"><label for="mooddown-{{id}}" class="labelcheck3 shadow"></label></div><div style="" class="checkboxThree4"><input style="position:absolute;left: -9999px;" type="checkbox" id="moodwaydown-{{id}}" name="moodwaydown-{{id}}" value="moodwaydown" class="mood"><label for="moodwaydown-{{id}}" class="labelcheck4 shadow"></label></div></div></div>
                            {{/each}}
                            </div>
                            {{/if}}
                            {{#if tracks.items}}
                            <div class="sectiontracks" style=""><h2 style="color: #00bc00 !important;">Pick Tracks</h2>
                            {{#each tracks.items}}
                            <div data-track-id="{{id}}" class="covering" id="{{id}}">{{#if album.images.0.url}}<img data-album-id="{{id}}" src="{{album.images.0.url}}" width="100px" height="100px" class="cover"/>{{else}}<img data-album-id="{{id}}" src="/images/unknown.png" width="100px" height="100px" class="cover"/>{{/if}}<div><span class="wrap">{{trimString name}}</span><span class="tooltip2"><span class="fa fa-cog"></span><span id="title-{{id}}" data-tooltip="tooltip" class="tooltiptext" title=""></span></span></div><div style="display:block;text-align:ccenter;margin:0 auto;top: -20px; position: relative;"><div style="" class="checkboxThree1"><input style="position:absolute;left: -9999px;" type="checkbox" id="moodup-{{id}}" name="moodup-{{id}}" value="moodup" class="mood"><label for="moodup-{{id}}" class="labelcheck1 shadow"></label></div><div style="" class="checkboxThree2"><input style="position:absolute;left: -9999px;" type="checkbox" id="moodwayup-{{id}}" name="moodwayup-{{id}}" value="moodwayup" class="mood"><label for="moodwayup-{{id}}" class="labelcheck2 shadow"></label></div><div style="" class="checkboxThree3"><input style="position:absolute;left: -9999px;" type="checkbox" id="mooddown-{{id}}" name="mooddown-{{id}}" value="mooddown" class="mood"><label for="mooddown-{{id}}" class="labelcheck3 shadow"></label></div><div style="" class="checkboxThree4"><input style="position:absolute;left: -9999px;" type="checkbox" id="moodwaydown-{{id}}" name="moodwaydown-{{id}}" value="moodwaydown" class="mood"><label for="moodwaydown-{{id}}" class="labelcheck4 shadow"></label></div></div></div>
                            {{/each}}
                            </div>
                            {{/if}}
                    br(style="clear: both;")
                    p(id="addmessage")
                    div
                        input(type="type" style="margin: 0 auto;margin-bottom:20px;display:none" id="addtoplaylist" class="btn btn-primary boutton bouttoncontainer" value="Add to Playlist")
        
        input(id="togglerules" type="checkbox" class="inputexpandrules")
        label(for="togglerules", class="labelexpandrules")!= "Edit Rules"
        div(id="expandrules")
            - var results = rules
            - var acup = results[0].acousticness*100
            - var acdown = results[2].acousticness*100
            - var acwayup = results[1].acousticness*100
            - var acwaydown = results[3].acousticness*100
            - var danceup = results[0].danceability*100
            - var dancedown = results[2].danceability*100
            - var dancewayup = results[1].danceability*100
            - var dancewaydown = results[3].danceability*100
            - var enup = results[0].energy*100
            - var endown = results[2].energy*100
            - var enwayup = results[1].energy*100
            - var enwaydown = results[3].energy*100
            - var keyup = results[0].key
            - var keydown = results[2].key
            - var keywayup = results[1].key
            - var keywaydown = results[3].key
            - var liveup = results[0].liveness*100
            - var livedown = results[2].liveness*100
            - var livewayup = results[1].liveness*100
            - var livewaydown = results[3].liveness*100
            - var modeup = results[0].mode
            - var modedown = results[2].mode
            - var modewayup = results[1].mode
            - var modewaydown = results[3].mode
            - var speechup = results[0].speechiness*100
            - var speechdown = results[2].speechiness*100
            - var speechwayup = results[1].speechiness*100
            - var speechwaydown = results[3].speechiness*100
            - var valup = results[0].valence*100
            - var valdown = results[2].valence*100
            - var valwayup = results[1].valence*100
            - var valwaydown = results[3].valence*100
            section
                p!= "Set up the business rules for the stock market."
                form(id="playlistrules-form" action="/updaterule" method="post")
                    div(id="rulesup" style="")
                        h2(style="color: #00bc00 !important;")!="Up"
                        div(class="range-slider")!="Acousticness"
                            input(class="range-slider__range" type="range" value="#{acup}" min="0" max="100" id="acousticup" name="acousticup")
                            span(class="range-slider__value")!= "0"
                        div(class="range-slider")!="Danceability"
                          input(class="range-slider__range" type="range" value="#{danceup}" min="0" max="100" step="10" id="danceup" name="danceup")
                          span(class="range-slider__value")!="0"
                        div(class="range-slider")!="Energy"
                          input(class="range-slider__range" type="range" value="#{enup}" min="0" max="100" id="enup" name="enup")
                          span(class="range-slider__value")!="0"
                        div(class="range-slider")!="Key"
                            select(name="keyup" type="text" id="keyup" class="form-control" style="height: 30px; width: 42px;margin-bottom:10px" placeholder="Select")
                                option(value="0" selected=(keyup==0 ? "selected" : undefined))!="0"
                                option(value="1" selected=(keyup==1 ? "selected" : undefined))!="1"
                                option(value="2" selected=(keyup==2 ? "selected" : undefined))!="2"
                                option(value="3" selected=(keyup==3 ? "selected" : undefined))!="3"
                                option(value="4" selected=(keyup==4 ? "selected" : undefined))!="4"
                                option(value="5" selected=(keyup==5 ? "selected" : undefined))!="5"
                                option(value="6" selected=(keyup==6 ? "selected" : undefined))!="6"
                                option(value="7" selected=(keyup==7 ? "selected" : undefined))!="7"
                                option(value="8" selected=(keyup==8 ? "selected" : undefined))!="8"
                                option(value="9" selected=(keyup==9 ? "selected" : undefined))!="9"
                                option(value="10" selected=(keyup==10 ? "selected" : undefined))!="10"
                                option(value="11" selected=(keyup==11 ? "selected" : undefined))!="11"
                        div(class="range-slider")!="Liveness"
                          input(class="range-slider__range" type="range" value="#{liveup}" min="0" max="100" id="liveup" name="liveup")
                          span(class="range-slider__value")!="0"
                        div(class="range-slider")!="Mode" 
                            select(name="modeup" type="text" id="modeup" class="form-control" style="height: 30px; width: 65px;margin-bottom:10px" placeholder="Select")
                                option(value="select playlist" selected=(modeup==="none" ? "selected" : undefined))!="None"
                                option(value="minor" selected=(modeup=="minor" ? "selected" : undefined))!="Minor"
                                option(value="major" selected=(modeup=="major" ? "selected" : undefined))!="Major"
                        div(class="range-slider")!="Speechiness"
                          input(class="range-slider__range" type="range" value="#{speechup}" min="0" max="100" id="speechup" name="speechup")
                          span(class="range-slider__value")!="0"
                        div(class="range-slider")!="Valence"
                          input(class="range-slider__range" type="range" value="#{valup}" min="0" max="100" id="valup" name="valup")
                          span(class="range-slider__value")!="0"

                    div(id="ruleswayup" style="")
                        h2(style="color: #00bc00 !important;")!="Way Up"
                        div(class="range-slider")!="Acousticness"
                            input(class="range-slider__range" type="range" value="#{acwayup}" min="0" max="100" id="acousticwayup" name="acousticwayup")
                            span(class="range-slider__value")!= "0"
                        div(class="range-slider")!="Danceability"
                          input(class="range-slider__range" type="range" value="#{dancewayup}" min="0" max="100" step="10" id="dancewayup" name="dancewayup")
                          span(class="range-slider__value")!="0"
                        div(class="range-slider")!="Energy"
                          input(class="range-slider__range" type="range" value="#{enwayup}" min="0" max="100" id="enwayup" name="enwayup")
                          span(class="range-slider__value")!="0"
                        div(class="range-slider")!="Key"
                            select(name="keywayup" type="text" id="keywayup" class="form-control" style="height: 30px; width: 42px;margin-bottom:10px" placeholder="Select")
                                option(value="0" selected=(keywayup==0 ? "selected" : undefined))!="0"
                                option(value="1" selected=(keywayup==1 ? "selected" : undefined))!="1"
                                option(value="2" selected=(keywayup==2 ? "selected" : undefined))!="2"
                                option(value="3" selected=(keywayup==3 ? "selected" : undefined))!="3"
                                option(value="4" selected=(keywayup==4 ? "selected" : undefined))!="4"
                                option(value="5" selected=(keywayup==5 ? "selected" : undefined))!="5"
                                option(value="6" selected=(keywayup==6 ? "selected" : undefined))!="6"
                                option(value="7" selected=(keywayup==7 ? "selected" : undefined))!="7"
                                option(value="8" selected=(keywayup==8 ? "selected" : undefined))!="8"
                                option(value="9" selected=(keywayup==9 ? "selected" : undefined))!="9"
                                option(value="10" selected=(keywayup==10 ? "selected" : undefined))!="10"
                                option(value="11" selected=(keywayup==11 ? "selected" : undefined))!="11"
                        div(class="range-slider")!="Liveness"
                          input(class="range-slider__range" type="range" value="#{livewayup}" min="0" max="100" id="livewayup" name="livewayup")
                          span(class="range-slider__value")!="0"
                        div(class="range-slider")!="Mode"
                            select(name="modewayup" type="text" id="modewayup" class="form-control" style="height: 30px; width: 65px;margin-bottom:10px" placeholder="Select")
                                option(value="select playlist" selected=(modewayup=="none" ? "selected" : undefined))!="None"
                                option(value="minor"  selected=(modewayup=="minor" ? "selected" : undefined))!="Minor"
                                option(value="major" selected=(modewayup=="major" ? "selected" : undefined))!="Major"
                        div(class="range-slider")!="Speechiness"
                          input(class="range-slider__range" type="range" value="#{speechwayup}" min="0" max="100" id="speechwayup" name="speechwayup")
                          span(class="range-slider__value")!="0"
                        div(class="range-slider")!="Valence"
                          input(class="range-slider__range" type="range" value="#{valwayup}" min="0" max="100" id="valwayup" name="valwayup")
                          span(class="range-slider__value")!="0"

                    div(id="rulesdown" style="")
                        h2(style="color: #00bc00 !important;")!="Down"
                        div(class="range-slider")!="Acousticness"
                            input(class="range-slider__range" type="range" value="#{acdown}" min="0" max="100" id="acousticdown" name="acousticdown")
                            span(class="range-slider__value")!= "0"
                        div(class="range-slider")!="Danceability"
                          input(class="range-slider__range" type="range" value="#{dancedown}" min="0" max="100" step="10" id="dancedown" name="dancedown")
                          span(class="range-slider__value")!="0"
                        div(class="range-slider")!="Energy"
                          input(class="range-slider__range" type="range" value="#{endown}" min="0" max="100" id="endown" name="endown")
                          span(class="range-slider__value")!="0"
                        div(class="range-slider")!="Key"
                            select(name="keydown" type="text" id="keydown" class="form-control" style="height: 30px; width: 42px;margin-bottom:10px" placeholder="Select")
                                option(value="0" selected=(keydown==0 ? "selected" : undefined))!="0"
                                option(value="1" selected=(keydown==1 ? "selected" : undefined))!="1"
                                option(value="2" selected=(keydown==2 ? "selected" : undefined))!="2"
                                option(value="3" selected=(keydown==3 ? "selected" : undefined))!="3"
                                option(value="4" selected=(keydown==4 ? "selected" : undefined))!="4"
                                option(value="5" selected=(keydown==5 ? "selected" : undefined))!="5"
                                option(value="6" selected=(keydown==6 ? "selected" : undefined))!="6"
                                option(value="7" selected=(keydown==7 ? "selected" : undefined))!="7"
                                option(value="8" selected=(keydown==8 ? "selected" : undefined))!="8"
                                option(value="9" selected=(keydown==9 ? "selected" : undefined))!="9"
                                option(value="10" selected=(keydown==10 ? "selected" : undefined))!="10"
                                option(value="11" selected=(keydown==11 ? "selected" : undefined))!="11"
                        div(class="range-slider")!="Liveness"
                          input(class="range-slider__range" type="range" value="#{livedown}" min="0" max="100" id="livedown" name="livedown")
                          span(class="range-slider__value")!="0"
                        div(class="range-slider")!="Mode"
                            select(name="modedown" type="text" id="modedown" class="form-control" style="height: 30px; width: 65px;margin-bottom:10px" placeholder="Select")
                                option(value="select playlist" selected=(modedown=="none" ? "selected" : undefined))!="None"
                                option(value="minor" selected=(modedown=="minor" ? "selected" : undefined))!="Minor"
                                option(value="major" selected=(modedown=="major" ? "selected" : undefined))!="Major"
                        div(class="range-slider")!="Speechiness"
                          input(class="range-slider__range" type="range" value="#{speechdown}" min="0" max="100" id="speechdown" name="speechdown")
                          span(class="range-slider__value")!="0"
                        div(class="range-slider")!="Valence"
                          input(class="range-slider__range" type="range" value="#{valdown}" min="0" max="100" id="valdown" name="valdown")
                          span(class="range-slider__value")!="0"

                    div(id="ruleswaydown" style="")
                        h2(style="color: #00bc00 !important;")!="Way Down"
                        div(class="range-slider")!="Acousticness"
                            input(class="range-slider__range" type="range" value="#{acwaydown}" min="0" max="100" id="acousticwaydown" name="acousticwaydown")
                            span(class="range-slider__value")!= "0"
                        div(class="range-slider")!="Danceability"
                          input(class="range-slider__range" type="range" value="#{dancewaydown}" min="0" max="100" step="10" id="dancewaydown" name="dancedwayown")
                          span(class="range-slider__value")!="0"
                        div(class="range-slider")!="Energy"
                          input(class="range-slider__range" type="range" value="#{enwaydown}" min="0" max="100" id="enwaydown" name="enwaydown")
                          span(class="range-slider__value")!="0"
                        div(class="range-slider")!="Key"
                            select(name="keywaydown" type="text" id="keywaydown" class="form-control" style="height: 30px; width: 42px;margin-bottom:10px" placeholder="Select")
                                option(value="0" selected=(keywaydown==0 ? "selected" : undefined))!="0"
                                option(value="1" selected=(keywaydown==1 ? "selected" : undefined))!="1"
                                option(value="2" selected=(keywaydown==2 ? "selected" : undefined))!="2"
                                option(value="3" selected=(keywaydown==3 ? "selected" : undefined))!="3"
                                option(value="4" selected=(keywaydown==4 ? "selected" : undefined))!="4"
                                option(value="5" selected=(keywaydown==5 ? "selected" : undefined))!="5"
                                option(value="6" selected=(keywaydown==6 ? "selected" : undefined))!="6"
                                option(value="7" selected=(keywaydown==7 ? "selected" : undefined))!="7"
                                option(value="8" selected=(keywaydown==8 ? "selected" : undefined))!="8"
                                option(value="9" selected=(keywaydown==9 ? "selected" : undefined))!="9"
                                option(value="10" selected=(keywaydown==10 ? "selected" : undefined))!="10"
                                option(value="11" selected=(keywaydown==11 ? "selected" : undefined))!="11"
                        div(class="range-slider")!="Liveness"
                          input(class="range-slider__range" type="range" value="#{livewaydown}" min="0" max="100" id="livewaydown" name="livewaydown")
                          span(class="range-slider__value")!="0"
                        div(class="range-slider")!="Mode"
                            select(name="modewaydown" type="text" id="modewaydown" class="form-control" style="height: 30px; width: 65px;margin-bottom:10px" placeholder="Select")
                                option(value="select playlist" selected=(modewaydown=="none" ? "selected" : undefined))!="None"
                                option(value="minor" selected=(modewaydown=="minor" ? "selected" : undefined))!="Minor"
                                option(value="major" selected=(modewaydown=="major" ? "selected" : undefined))!="Major"
                        div(class="range-slider")!="Speechiness"
                          input(class="range-slider__range" type="range" value="#{speechwaydown}" min="0" max="100" id="speechwaydown" name="speechwaydown")
                          span(class="range-slider__value")!="0"
                        div(class="range-slider")!="Valence"
                          input(class="range-slider__range" type="range" value="#{valwaydown}" min="0" max="100" id="valwaydown" name="valwaydown")
                          span(class="range-slider__value")!="0"
        br(style="clear: both;")

    script.
        var bearer = "Bearer " + "#{access_token}";
        var user;
        var playList = [];
        // find template and compile it
        var templateSource = document.getElementById('results-template').innerHTML,
            template = Handlebars.compile(templateSource),
            resultsPlaceholder = document.getElementById('resultsss'),
            playingCssClass = 'playing',
            noplayingClass = "cannotplay",
            audioObject = null,
            templateSourceplay = document.getElementById('playlistres-template').innerHTML,
            templateplay = Handlebars.compile(templateSourceplay),
            playlistresPlaceholder = document.getElementById('playlistres'),
            templateSourceplayedit = document.getElementById('playlistedit-template').innerHTML,
            templateedit = Handlebars.compile(templateSourceplayedit),
            editPlaceholder = document.getElementById('playlistedit'),
            templateSourceplaylist = document.getElementById('playlisteditlist-template').innerHTML
            templatelist = Handlebars.compile(templateSourceplaylist),
            tracklistPlaceholder = document.getElementById('playlisteditlist');

        var fetchTracks = function (albumId, callback) {
            $.ajax({
                url: 'https://api.spotify.com/v1/albums/' + albumId,
                headers: {'Authorization': bearer},
                success: function (response) {
                    callback(response);
                }
            });
        };

        var fetchAudioFeature = function (trackId) {
            $.ajax({
                url: 'https://api.spotify.com/v1/audio-features/' + trackId,
                headers: {'Authorization': bearer},
                success: function (features) {
                    console.log("success audio: " + features);
                    //audPlaceholder.innerHTML = templateaud(features);
            var feat = "";
            feat +="Danceability: " + features.danceability + "/r";
            feat +="Energy: " + features.energy + "/r";
            feat +="Loudness: " + features.loudness + "/r";
            feat +="Mode: " + features.mode + "/r";
            feat +="Speechiness: " + features.speechiness + "/r";
            feat +="Acousticness: " + features.acousticness + "/r";
            feat +="Instrumentalness: " + features.instrumentalness + "/r";
            feat +="Liveness: " + features.liveness + "/r";
            feat +="Valence: " + features.valence + "/r";
            feat +="Tempo: " + features.tempo + "/r";
            console.log("features: " + feat);
            //var findtrack = '#'+trackId;
            //$("#results").find(findtrack).append(feat);
            //console.debug($("#results"));
            //console.debug($("#results").find(findtrack));

                }
            });
        };

        var searchAlbums_ = function (query) {
            console.log("looking for albums");
            console.log("access: " + bearer);
            console.log("user_id: " + user_id);
            $.ajax({
                url: 'https://api.spotify.com/v1/search',
                headers: {'Authorization': bearer},
                data: {
                    q: query,
                    type: 'album,track,artist'
                },
                success: function (response) {
                    resultsPlaceholder.innerHTML = template(response);
                    console.log("success albums: " + resultsPlaceholder.innerHTML);
                    console.dir(response);
                }
            });
        };

        var searchAlbums = function (query) {
            console.log("looking for albums");
            console.log("access: " + bearer);
            $.ajax({
                url: 'https://api.spotify.com/v1/search',
                headers: {'Authorization': bearer},
                data: {
                    q: query,
                    type: 'album,track,artist'
                },
                success: function (response) {
                    resultsPlaceholder.innerHTML = template(response);
                    console.log("success albums: " + resultsPlaceholder.innerHTML);
                    console.dir(response);

                    var trackids = "";
                    var i=0;
                    /*$( "div[data-track-id]" ).each(function(){
                        if(i>0){
                        trackids += ",";
                        }
                        trackids += $(this).attr( 'data-track-id' );
                        
                        i++;
                    });*/
                        //var testdata = $(this).data('test');
                        for(var track in response.tracks.items){
                        if(i>0){
                        trackids += ",";
                        }
                        trackids += response.tracks.items[i].id;
                        i++;
                        }
                        console.dir(response.tracks.items);
                        console.log("looking for trackids: " + trackids);
                        

                                $.ajax({
                                    url: 'https://api.spotify.com/v1/audio-features?ids=' + trackids,
                                    headers: {'Authorization': bearer},
                                    success: function (features) {
                                        console.log("success audio: " + features);
                                        console.dir(features);
                                        //audPlaceholder.innerHTML = templateaud(features);
                                        var j = 0;
                                for(var featur in features.audio_features){
                                var feat = "";
                                var feature = features.audio_features[j];
                                feat +="<b>Danceability</b>: " + feature.danceability + "<br>";
                                feat +="<b>Energy</b>: " + feature.energy + "<br>";
                                feat +="<b>Loudness</b>: " + feature.loudness + "<br>";
                                feat +="<b>Mode</b>: " + feature.mode + "<br>";
                                feat +="<b>Speechiness</b>: " + feature.speechiness + "<br>";
                                feat +="<b>Acousticness</b>: " + feature.acousticness + "<br>";
                                feat +="<b>Instrumentalness</b>: " + feature.instrumentalness + "<br>";
                                feat +="<b>Liveness</b>: " + feature.liveness + "<br>";
                                feat +="<b>Valence</b>: " + feature.valence + "<br>";
                                feat +="<b>Tempo</b>: " + feature.tempo;
                                console.log("feature: " + feat);
                                var findtrack = '#' + feature.id;
                                //$("#title-"+feature.id).attr("data-tooltip",feat);
                                $("#title-"+feature.id).html(feat);
                                console.dir($("#title-"+feature.id));
                                //console.debug($("#results").find(findtrack));
                                j++;
                                }

                                    }
                                });

                        //$(this).val(testdata);

                        console.log( "ready!" );
                }
            });
        };

        var searchPlaylists = function () {
            console.log("looking for playlists");
            console.log("access token in playlists: " + bearer);
            $.ajax({
                url: 'https://api.spotify.com/v1/me/playlists',
                headers: {'Authorization': bearer},
                success: function (response) {
                    playlistresPlaceholder.innerHTML = templateplay(response);
                    
                    //editPlaceholder.innerHTML = templateedit(response);
                    console.log("success get playlists.");
                    
                }
            });
        };


        var searchPlaylistsEdit = function () {
            console.log("looking for playlists");
            console.log("access token in playlists: " + bearer);
            playList=[];
            $.ajax({
                url: 'https://api.spotify.com/v1/me/playlists',
                headers: {'Authorization': bearer},
                success: function (response) {
                    //playlistresPlaceholder.innerHTML = templateplay(response);
                    editPlaceholder.innerHTML = templateedit(response);
                    var i=0;
                    for(var l in response.items){
                    playList.push(response.items[i].name);
                    i++;
                    }
                    console.log("success get PLAYLIST.");
                    console.dir(playList);

                    $.ajax({
                            url: 'https://api.spotify.com/v1/me',
                            headers: {'Authorization': bearer},
                            success: function (response) {
                                user = response.id;
                                console.log("got user id to create playlist: " + user);

                            }
                        });

                    $( "#playedit" ).change(function() {
                        console.log("playedit selected");
                        //var playlistid = $(this).attr('id');
                        var playlistid = $(this).val();

                        console.log( "playlist is called: " + playlistid);
                        
                        

                                $.ajax({
                                    url: 'https://api.spotify.com/v1/users/'+user+'/playlists/'+playlistid+'/tracks',
                                    headers: {'Authorization': bearer,'Content-Type': 'application/json'},
                                    success: function (resp) {
                                        tracklistPlaceholder.innerHTML = templatelist(resp);
                                        //$(".tracksplaylist").html("<b>" + playlistname + "</b> successfully created!");
                                        console.log("successfully retrieved playlist tracks for " + user);
                                        console.dir(resp.items);

                                        $( ".trashtrack" ).click(function() {
                                            var trackid = $(this).attr("id");
                                            var parentr = $(this).parent().parent();
                                            //var user;
                                            console.log("deleting track : " + trackid);
                                            console.log("user: " + user);
                                            $.ajax({
                                                method: 'DELETE',
                                                url: 'https://api.spotify.com/v1/users/'+user+'/playlists/'+playlistid+'/tracks',
                                                data: JSON.stringify({tracks:[{ "uri": "spotify:track:"+ trackid}]}),
                                                headers: {'Authorization': bearer,'Content-Type': 'application/json'},
                                                success: function (resp2) {
                                                    console.log("trackid " + trackid + " :  successfully deleted.");
                                                    parentr.addClass("deletedtrack");
                                                }
                                            });
                                        });

                                }
                            });
                });
            }
            });
            };

        $( "#addtoplaylist" ).click(function() {
            var trackid = $(this).attr("id");
            var parentr = $(this).parent().parent();
            var playlistidselected = $("#playSelect").val();
            console.log("playlist selected is: " + playlistidselected);
            var moods = $(".mood");
            var i = 0;
            var checked = false;
            var builddata=[];
            var urislist = [];
            console.dir(moods);
            
            for(var m in moods){
                var addmusic = {trackid:"",mode_up:0, mode_down:0, mode_waydown:0, mode_wayup:0}
                var tracks = [];
                var inputid;
                var checked;
                if($($(".mood")[i]).length > 0){
                checked = $($(".mood")[i])[0].checked;
                }
                if(checked){
                    inputid = $($(".mood")[i])[0].id;
                    console.log("inputid: " + inputid);
                    var split = inputid.split("-");
                    var mood = split[0];
                    var trackid = split[1];
                    var findtrack = tracks.indexOf(trackid);
                    console.log("trackid: " + trackid);
                    console.log("findtrack: " + findtrack);
                    if(findtrack < 0){
                        tracks.push(trackid);
                        addmusic.trackid= trackid;
                        urislist.push("spotify:track:"+trackid);
                        if(mood == "moodup"){
                            addmusic.mode_up = 1;
                        }
                        if(mood == "moodwayup"){
                            addmusic.mode_wayup = 1;
                        }
                        if(mood == "mooddown"){
                            addmusic.mode_down = 1;
                        }
                        if(mood == "moodwaydown"){
                            addmusic.mode_waydown = 1;
                        }
                        console.log("addmusic: " + JSON.stringify(addmusic));
                        builddata.push(addmusic);
                        console.log("builddata: " + JSON.stringify(builddata));                  
                    } else {
                        var findmusic = builddata[findtrack];
                        if(mood == "moodup"){
                            findmusic.mode_up = 1;
                        }
                        if(mood == "moodwayup"){
                            findmusic.mode_wayup = 1;
                        }
                        if(mood == "mooddown"){
                            findmusic.mode_down = 1;
                        }
                        if(mood == "moodwaydown"){
                            findmusic.mode_waydown = 1;
                        }
                        console.log("findmusic: " + JSON.stringify(findmusic));
                        console.log("builddata0: " + JSON.stringify(builddata));                    
                    }
                    
                }
                i++;
            }
            console.log("final builddata: " + JSON.stringify(builddata));  

            console.log("user: " + user);
            var play = $("#playSelect").val();
            console.log("playlistid: " + play);
            if(play != "select playlist"){

            $.ajax({
                method: 'POST',
                url: 'https://api.spotify.com/v1/users/'+user+'/playlists/'+play,
                headers: {'Authorization': bearer,'Content-Type': 'application/json'},
                data: JSON.stringify({uris: urislist}),
                success: function (resp) {
                    $("#addmessage").html("<b>Playlist</b> has been successfully updated!");
                    console.log("successfully updated playlist for " + user);
                    $.ajax({
                        method: "POST",
                        url: 'https://financialmoodswing.herokuapp.com/addtoplaylist',
                        data: {
                            databuild: JSON.stringify(builddata),
                            playlistid: play
                        },
                        success: function (response) {
                            console.log("success add music to playlist.");
                        }
                    });
                }, error: function (resp0) {
                    console.dir(resp0);
                }
                });




            } else {
                $("#addmessage").html("Please select a playlist above. Then try again.");
            }
        });

        var createPlaylist = function () {
            var playlistname = $('#queryplay').val();
            //var user;
            console.log("creating playlist : "+playlistname);
            console.log("found it? " + playList.indexOf(playlistname));
            if(playlistname != undefined && playList.indexOf(playlistname) == -1){

            $.ajax({
                url: 'https://api.spotify.com/v1/me',
                headers: {'Authorization': bearer},
                success: function (response) {
                    user = response.id;
                    console.log("got user id to create playlist: " + user);

            $.ajax({
                method: 'POST',
                url: 'https://api.spotify.com/v1/users/'+user+'/playlists',
                headers: {'Authorization': bearer,'Content-Type': 'application/json'},
                data: JSON.stringify({name:playlistname,  description: 'Financial mood Swing test new playlist'}),
                success: function (resp) {
                    $(".messageCreatePlaylist").html("<b>" + playlistname + "</b> successfully created!");
                    console.log("successfully created playlist for " + user);
                }
                });

                }
            });

            



            } else if(playList.indexOf(playlistname) >= 0){
                $(".messageCreatePlaylist").html("<b>" + playlistname + "</b> already exists. Please enter a new Playlist name");
            }
        };

        resultsss.addEventListener('click', function (e) {
            var target = e.target;
            if (target !== null && target.classList.contains('cover')) {
                if (target.classList.contains(playingCssClass)) {
                    audioObject.pause();
                } else {
                    if (audioObject) {
                        audioObject.pause();
                    }
                    fetchTracks(target.getAttribute('data-album-id'), function (data) {
                        var preview = data.tracks.items[0].preview_url;
                        if(preview != null){
                        audioObject = new Audio(preview);
                        audioObject.play();
                        target.classList.add(playingCssClass);
                        audioObject.addEventListener('ended', function () {
                            target.classList.remove(playingCssClass);
                        });
                        audioObject.addEventListener('pause', function () {
                            target.classList.remove(playingCssClass);
                        });
                        } else {
                            target.classList.add(noplayingClass);
                        }
                    });
                }
            }
        });

        Handlebars.registerHelper('trimString', function(passedString) {
        console.log("before trimstring");
            var len = passedString.length;
            var add = "";
            if(len > 24){
                add = "...";
            }
            var theString = passedString.substring(0,25) + add;
            
            console.log("theString is: " + theString);
            return new Handlebars.SafeString(theString)
        });

        Handlebars.registerHelper('test', function(trackid) {
            console.log("before fetch audio features");
            var i = fetchAudioFeature(trackid);
            console.log("I is: " + i);
            return new Handlebars.SafeString(i);
        });

        Handlebars.registerHelper('displayTitle', function(features) {
            var feat = "";
            feat +="Danceability: " + features.danceability + "/r";
            feat +="Energy: " + features.energy + "/r";
            feat +="Loudness: " + features.loudness + "/r";
            feat +="Mode: " + features.mode + "/r";
            feat +="Speechiness: " + features.speechiness + "/r";
            feat +="Acousticness: " + features.acousticness + "/r";
            feat +="Instrumentalness: " + features.instrumentalness + "/r";
            feat +="Liveness: " + features.liveness + "/r";
            feat +="Valence: " + features.valence + "/r";
            feat +="Tempo: " + features.tempo + "/r";
            console.log("features: " + feat);
            return new Handlebars.SafeString(feat)
        });

        document.getElementById('search-form').addEventListener('submit', function (e) {
            e.preventDefault();
            //document.getElementById('addtoplaylist').style.display = "block";
            searchAlbums(document.getElementById('query').value);
            searchPlaylists();
        }, false);

        searchPlaylistsEdit();

        var rangeSlider = function(){
        var slider = $('.range-slider'),
              range = $('.range-slider__range'),
              value = $('.range-slider__value');
            
          slider.each(function(){

            value.each(function(){
              var value = $(this).prev().attr('value');
              $(this).html(value/100);
            });

            range.on('input', function(){
                var val = this.value;
              $(this).next(value).html(val/100);
            });
          });
        };

        rangeSlider();

        /*if($('.sectiontracks').is(':visible')) {
          var h = $( ".sectionalbums" ).height() + $( ".sectionartists" ).height() + $( ".sectiontracks" ).height();
          console.log("add music height: " + h);
          $(".expandadd").height(h);
        };*/


        $( "#searchmusic" ).click(function() {
            console.dir($( "#addtoplaylist" ));
            $( "#addtoplaylist" ).show();
        });

        $( ".labelexpandedit" ).click(function() {
            console.dir($( ".labelexpandedit" ));
            searchPlaylistsEdit();
        });

        $( "#acousticup" ).mouseup(function() {
          console.log( "Handler for .mouseup() called: " + $(this).val());
            $.ajax({
                method: "POST",
                url: 'https://financialmoodswing.herokuapp.com/updaterule',
                data: {
                    rule: "up",
                    val: $(this).val(),
                    col: "acousticness"
                },
                success: function (response) {
                    console.log("success update acup.");
                }
            });
        });

        $( "#acousticdown" ).mouseup(function() {
          console.log( "Handler for .mouseup() called: " + $(this).val());
            $.ajax({
                method: "POST",
                url: 'https://financialmoodswing.herokuapp.com/updaterule',
                data: {
                    rule: "down",
                    val: $(this).val(),
                    col: "acousticness"
                },
                success: function (response) {
                    console.log("success update acousticdown.");
                }
            });
        });

        $( "#acousticwaydown" ).mouseup(function() {
          console.log( "Handler for .mouseup() called: " + $(this).val());
            $.ajax({
                method: "POST",
                url: 'https://financialmoodswing.herokuapp.com/updaterule',
                data: {
                    rule: "waydown",
                    val: $(this).val(),
                    col: "acousticness"
                },
                success: function (response) {
                    console.log("success update acousticwaydown.");
                }
            });
        });        

        $( "#acousticwayup" ).mouseup(function() {
          console.log( "Handler for .mouseup() called: " + $(this).val());
            $.ajax({
                method: "POST",
                url: 'https://financialmoodswing.herokuapp.com/updaterule',
                data: {
                    rule: "wayup",
                    val: $(this).val(),
                    col: "acousticness"
                },
                success: function (response) {
                    console.log("success update acousticwayup.");
                }
            });
        });

        $( "#modeup" ).change(function() {
          console.log( "Handler for .change() called: " + $(this).val());
            $.ajax({
                method: "POST",
                url: 'https://financialmoodswing.herokuapp.com/updaterulestr',
                data: {
                    rule: "up",
                    val: $(this).val(),
                    col: "mode"
                },
                success: function (response) {
                    console.log("success update modeup.");
                }
            });
        });

        $( "#modedown" ).change(function() {
          console.log( "Handler for .change() called: " + $(this).val());
            $.ajax({
                method: "POST",
                url: 'https://financialmoodswing.herokuapp.com/updaterulestr',
                data: {
                    rule: "down",
                    val: $(this).val(),
                    col: "mode"
                },
                success: function (response) {
                    console.log("success update modedown.");
                }
            });
        });

        $( "#modewaydown" ).change(function() {
          console.log( "Handler for .change() called: " + $(this).val());
            $.ajax({
                method: "POST",
                url: 'https://financialmoodswing.herokuapp.com/updaterulestr',
                data: {
                    rule: "waydown",
                    val: $(this).val(),
                    col: "mode"
                },
                success: function (response) {
                    console.log("success update modewaydown.");
                }
            });
        });        

        $( "#modewayup" ).change(function() {
          console.log( "Handler for .change() called: " + $(this).val());
            $.ajax({
                method: "POST",
                url: 'https://financialmoodswing.herokuapp.com/updaterulestr',
                data: {
                    rule: "wayup",
                    val: $(this).val(),
                    col: "mode"
                },
                success: function (response) {
                    console.log("success update modewayup.");
                }
            });
        });
        $( "#keyup" ).change(function() {
          console.log( "Handler for .change() called: " + $(this).val());
            $.ajax({
                method: "POST",
                url: 'https://financialmoodswing.herokuapp.com/updateruleint',
                data: {
                    rule: "up",
                    val: $(this).val(),
                    col: "key"
                },
                success: function (response) {
                    console.log("success update keyup.");
                }
            });
        });

        $( "#keydown" ).change(function() {
          console.log( "Handler for .change() called: " + $(this).val());
            $.ajax({
                method: "POST",
                url: 'https://financialmoodswing.herokuapp.com/updateruleint',
                data: {
                    rule: "down",
                    val: $(this).val(),
                    col: "key"
                },
                success: function (response) {
                    console.log("success update keydown.");
                }
            });
        });

        $( "#keywaydown" ).change(function() {
          console.log( "Handler for .change() called: " + $(this).val());
            $.ajax({
                method: "POST",
                url: 'https://financialmoodswing.herokuapp.com/updateruleint',
                data: {
                    rule: "waydown",
                    val: $(this).val(),
                    col: "key"
                },
                success: function (response) {
                    console.log("success update keywaydown.");
                }
            });
        });        

        $( "#keywayup" ).change(function() {
          console.log( "Handler for .change() called: " + $(this).val());
            $.ajax({
                method: "POST",
                url: 'https://financialmoodswing.herokuapp.com/updateruleint',
                data: {
                    rule: "wayup",
                    val: $(this).val(),
                    col: "key"
                },
                success: function (response) {
                    console.log("success update keywayup.");
                }
            });
        });

        $( "#danceup" ).mouseup(function() {
          console.log( "Handler for .mouseup() called: " + $(this).val());
            $.ajax({
                method: "POST",
                url: 'https://financialmoodswing.herokuapp.com/updaterule',
                data: {
                    rule: "up",
                    val: $(this).val(),
                    col: "danceability"
                },
                success: function (response) {
                    console.log("success update danceup.");
                }
            });
        });

        $( "#dancedown" ).mouseup(function() {
          console.log( "Handler for .mouseup() called: " + $(this).val());
            $.ajax({
                method: "POST",
                url: 'https://financialmoodswing.herokuapp.com/updaterule',
                data: {
                    rule: "down",
                    val: $(this).val(),
                    col: "danceability"
                },
                success: function (response) {
                    console.log("success update dancedown.");
                }
            });
        });

        $( "#dancewaydown" ).mouseup(function() {
          console.log( "Handler for .mouseup() called: " + $(this).val());
            $.ajax({
                method: "POST",
                url: 'https://financialmoodswing.herokuapp.com/updaterule',
                data: {
                    rule: "waydown",
                    val: $(this).val(),
                    col: "danceability"
                },
                success: function (response) {
                    console.log("success update dancewaydown.");
                }
            });
        });        

        $( "#dancewayup" ).mouseup(function() {
          console.log( "Handler for .mouseup() called: " + $(this).val());
            $.ajax({
                method: "POST",
                url: 'https://financialmoodswing.herokuapp.com/updaterule',
                data: {
                    rule: "wayup",
                    val: $(this).val(),
                    col: "danceability"
                },
                success: function (response) {
                    console.log("success update dancewayup.");
                }
            });
        });

        $( "#enup" ).mouseup(function() {
          console.log( "Handler for .mouseup() called: " + $(this).val());
            $.ajax({
                method: "POST",
                url: 'https://financialmoodswing.herokuapp.com/updaterule',
                data: {
                    rule: "up",
                    val: $(this).val(),
                    col: "energy"
                },
                success: function (response) {
                    console.log("success update enup.");
                }
            });
        });

        $( "#endown" ).mouseup(function() {
          console.log( "Handler for .mouseup() called: " + $(this).val());
            $.ajax({
                method: "POST",
                url: 'https://financialmoodswing.herokuapp.com/updaterule',
                data: {
                    rule: "down",
                    val: $(this).val(),
                    col: "energy"
                },
                success: function (response) {
                    console.log("success update endown.");
                }
            });
        });

        $( "#enwaydown" ).mouseup(function() {
          console.log( "Handler for .mouseup() called: " + $(this).val());
            $.ajax({
                method: "POST",
                url: 'https://financialmoodswing.herokuapp.com/updaterule',
                data: {
                    rule: "waydown",
                    val: $(this).val(),
                    col: "energy"
                },
                success: function (response) {
                    console.log("success update enwaydown.");
                }
            });
        });        

        $( "#enwayup" ).mouseup(function() {
          console.log( "Handler for .mouseup() called: " + $(this).val());
            $.ajax({
                method: "POST",
                url: 'https://financialmoodswing.herokuapp.com/updaterule',
                data: {
                    rule: "wayup",
                    val: $(this).val(),
                    col: "energy"
                },
                success: function (response) {
                    console.log("success update enwayup.");
                }
            });
        });

        $( "#liveup" ).mouseup(function() {
          console.log( "Handler for .mouseup() called: " + $(this).val());
            $.ajax({
                method: "POST",
                url: 'https://financialmoodswing.herokuapp.com/updaterule',
                data: {
                    rule: "up",
                    val: $(this).val(),
                    col: "liveness"
                },
                success: function (response) {
                    console.log("success update liveup.");
                }
            });
        });

        $( "#livedown" ).mouseup(function() {
          console.log( "Handler for .mouseup() called: " + $(this).val());
            $.ajax({
                method: "POST",
                url: 'https://financialmoodswing.herokuapp.com/updaterule',
                data: {
                    rule: "down",
                    val: $(this).val(),
                    col: "liveness"
                },
                success: function (response) {
                    console.log("success update livedown.");
                }
            });
        });

        $( "#livewaydown" ).mouseup(function() {
          console.log( "Handler for .mouseup() called: " + $(this).val());
            $.ajax({
                method: "POST",
                url: 'https://financialmoodswing.herokuapp.com/updaterule',
                data: {
                    rule: "waydown",
                    val: $(this).val(),
                    col: "liveness"
                },
                success: function (response) {
                    console.log("success update livewaydown.");
                }
            });
        });        

        $( "#livewayup" ).mouseup(function() {
          console.log( "Handler for .mouseup() called: " + $(this).val());
            $.ajax({
                method: "POST",
                url: 'https://financialmoodswing.herokuapp.com/updaterule',
                data: {
                    rule: "wayup",
                    val: $(this).val(),
                    col: "liveness"
                },
                success: function (response) {
                    console.log("success update livewayup.");
                }
            });
        });

        $( "#speechup" ).mouseup(function() {
          console.log( "Handler for .mouseup() called: " + $(this).val());
            $.ajax({
                method: "POST",
                url: 'https://financialmoodswing.herokuapp.com/updaterule',
                data: {
                    rule: "up",
                    val: $(this).val(),
                    col: "speechiness"
                },
                success: function (response) {
                    console.log("success update speechup.");
                }
            });
        });

        $( "#speechdown" ).mouseup(function() {
          console.log( "Handler for .mouseup() called: " + $(this).val());
            $.ajax({
                method: "POST",
                url: 'https://financialmoodswing.herokuapp.com/updaterule',
                data: {
                    rule: "down",
                    val: $(this).val(),
                    col: "speechiness"
                },
                success: function (response) {
                    console.log("success update speechdown.");
                }
            });
        });

        $( "#speechwaydown" ).mouseup(function() {
          console.log( "Handler for .mouseup() called: " + $(this).val());
            $.ajax({
                method: "POST",
                url: 'https://financialmoodswing.herokuapp.com/updaterule',
                data: {
                    rule: "waydown",
                    val: $(this).val(),
                    col: "speechiness"
                },
                success: function (response) {
                    console.log("success update speechwaydown.");
                }
            });
        });        

        $( "#acousticwayup" ).mouseup(function() {
          console.log( "Handler for .mouseup() called: " + $(this).val());
            $.ajax({
                method: "POST",
                url: 'https://financialmoodswing.herokuapp.com/updaterule',
                data: {
                    rule: "wayup",
                    val: $(this).val(),
                    col: "speechiness"
                },
                success: function (response) {
                    console.log("success update acousticwayup.");
                }
            });
        });

        $( "#valup" ).mouseup(function() {
          console.log( "Handler for .mouseup() called: " + $(this).val());
            $.ajax({
                method: "POST",
                url: 'https://financialmoodswing.herokuapp.com/updaterule',
                data: {
                    rule: "up",
                    val: $(this).val(),
                    col: "valence"
                },
                success: function (response) {
                    console.log("success update valup.");
                }
            });
        });

        $( "#valdown" ).mouseup(function() {
          console.log( "Handler for .mouseup() called: " + $(this).val());
            $.ajax({
                method: "POST",
                url: 'https://financialmoodswing.herokuapp.com/updaterule',
                data: {
                    rule: "down",
                    val: $(this).val(),
                    col: "valence"
                },
                success: function (response) {
                    console.log("success update valdown.");
                }
            });
        });

        $( "#valwaydown" ).mouseup(function() {
          console.log( "Handler for .mouseup() called: " + $(this).val());
            $.ajax({
                method: "POST",
                url: 'https://financialmoodswing.herokuapp.com/updaterule',
                data: {
                    rule: "waydown",
                    val: $(this).val(),
                    col: "valence"
                },
                success: function (response) {
                    console.log("success update valwaydown.");
                }
            });
        });        

        $( "#valwayup" ).mouseup(function() {
          console.log( "Handler for .mouseup() called: " + $(this).val());
            $.ajax({
                method: "POST",
                url: 'https://financialmoodswing.herokuapp.com/updaterule',
                data: {
                    rule: "wayup",
                    val: $(this).val(),
                    col: "valence"
                },
                success: function (response) {
                    console.log("success update valwayup.");
                }
            });
        });
