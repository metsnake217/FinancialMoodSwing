    
extends layout

block content

    div(class="container", style="height: 1213px;")
        h1!= "Create a Playlist"
        p!= "Type a playlist name and click on 'Create'."
        form(id="playlist-form")
            input(type="text" id="queryplay" value="" class="form-control" placeholder="Type Playlist title")
            input(type="submit" id="createplaylit" class="btn btn-primary" value="Create")
        h1!= "Search for an Artist"
        p!= "Type an artist name and click on 'Search'. Then, click on any album from the results to play 30 seconds of its first track if available."
        form(id="search-form")
            input(type="text" id="query" value="" class="form-control" placeholder="Type an Artist Name")
            input(type="submit" id="search" class="btn btn-primary" value="Search")
        
        form(id="playlistfill-form")
            div(id="playlistres")
                script(id="playlistres-template" type="text/x-handlebars-template")
                    <select name="playSelect" type="text" id="playSelect" class="form-control" style="border-color:#3d9dcb;margin-bottom:10px" placeholder="Select Playlist">
                    <option value="select playlist">Select Playlist</option>
                    {{#each items}}
                    <option value="{{id}}">{{name}}</option>
                    {{/each}}
                    </select>
            div(id="results")
                script(id="results-template" type="text/x-handlebars-template")
                    {{#each albums.items}}
                    <div style="/*background-image:url({{images.0.url}})*/" data-album-id="{{id}}" class="covering"><img data-album-id="{{id}}" src="{{images.0.url}}" width="100px" height="100px" class="cover"/><div><span class="wrap">{{trimString name}}</span><input type="checkbox" name="add" value="{{id}}" class="add" /><select name="mood" type="text" id="mood" class="form-control" style="border-color:#3d9dcb;margin-bottom:10px;width: 75px;margin: 5px;height: 30px;" placeholder="Mood"><option value="wayup">Mood</option><option value="wayup">Way Up</option><option value="up">Up</option></select></div></div>
                    {{/each}}
                    {{#each artists.items}}
                    <div style="/*background-image:url({{images.0.url}})*/" data-album-id="{{id}}" class="covering"><img data-album-id="{{id}}" src="{{images.0.url}}" width="100px" height="100px" class="cover"/><div><span class="wrap">{{trimString name}}</span><input type="checkbox" name="add" value="{{id}}" class="add" /><select name="mood" type="text" id="mood" class="form-control" style="border-color:#3d9dcb;margin-bottom:10px;width: 75px;margin: 5px;height: 30px;" placeholder="Mood"><option value="wayup">Mood</option><option value="wayup">Way Up</option><option value="up">Up</option></select></div></div>
                    {{/each}}
                    {{#each tracks.items}}
                    <div data-track-id="{{id}}" class="covering" id="{{id}}"><img data-album-id="{{id}}" src="{{album.images.0.url}}" width="100px" height="100px" class="cover"/><div><span class="wrap">{{trimString name}}</span><input type="checkbox" name="add" value="{{id}}" class="add" /><select name="mood" type="text" id="mood" class="form-control" style="border-color:#3d9dcb;margin-bottom:10px;width: 75px;margin: 5px;height: 30px;" placeholder="Mood"><option value="wayup">Mood</option><option value="wayup">Way Up</option><option value="up">Up</option></select><span id="title-{{id}}" title="">Features</span></div></div>
                    {{/each}}
            input(type="submit" style="margin: 0 auto; display: none;" id="addtoplaylist" class="btn btn-primary" value="Add to Playlist")

    script.
        var bearer = "Bearer " + "#{access_token}";
        // find template and compile it
        var templateSource = document.getElementById('results-template').innerHTML,
            template = Handlebars.compile(templateSource),
            resultsPlaceholder = document.getElementById('results'),
            playingCssClass = 'playing',
            noplayingClass = "cannotplay",
            audioObject = null,
            templateSourceplay = document.getElementById('playlistres-template').innerHTML,
            templateplay = Handlebars.compile(templateSourceplay),
            playlistresPlaceholder = document.getElementById('playlistres');
            //templateSourceaud = document.getElementById('audio-template').innerHTML,
            //templateaud = Handlebars.compile(templateSourceaud),
            //audPlaceholder = document.getElementById('audio');

        var fetchTracks = function (albumId, callback) {
            $.ajax({
                url: 'https://api.spotify.com/v1/albums/' + albumId,
                headers: {'Authorization': bearer},
                success: function (response) {
                    callback(response);
                }
            });
        };

        var fetchAudioFeature = function (trackId) {
            $.ajax({
                url: 'https://api.spotify.com/v1/audio-features/' + trackId,
                headers: {'Authorization': bearer},
                success: function (features) {
                    console.log("success audio: " + features);
                    //audPlaceholder.innerHTML = templateaud(features);
            var feat = "";
            feat +="Danceability: " + features.danceability + "/r";
            feat +="Energy: " + features.energy + "/r";
            feat +="Loudness: " + features.loudness + "/r";
            feat +="Mode: " + features.mode + "/r";
            feat +="Speechiness: " + features.speechiness + "/r";
            feat +="Acousticness: " + features.acousticness + "/r";
            feat +="Instrumentalness: " + features.instrumentalness + "/r";
            feat +="Liveness: " + features.liveness + "/r";
            feat +="Valence: " + features.valence + "/r";
            feat +="Tempo: " + features.tempo + "/r";
            console.log("features: " + feat);
            //var findtrack = '#'+trackId;
            //$("#results").find(findtrack).append(feat);
            //console.debug($("#results"));
            //console.debug($("#results").find(findtrack));

                }
            });
        };

        var searchAlbums_ = function (query) {
            console.log("looking for albums");
            console.log("access: " + bearer);
            $.ajax({
                url: 'https://api.spotify.com/v1/search',
                headers: {'Authorization': bearer},
                data: {
                    q: query,
                    type: 'album,track,artist'
                },
                success: function (response) {
                    resultsPlaceholder.innerHTML = template(response);
                    console.log("success albums: " + resultsPlaceholder.innerHTML);
                    console.dir(response);
                }
            });
        };

        var searchAlbums = function (query) {
            console.log("looking for albums");
            console.log("access: " + bearer);
            $.ajax({
                url: 'https://api.spotify.com/v1/search',
                headers: {'Authorization': bearer},
                data: {
                    q: query,
                    type: 'album,track,artist'
                },
                success: function (response) {
                    resultsPlaceholder.innerHTML = template(response);
                    console.log("success albums: " + resultsPlaceholder.innerHTML);
                    console.dir(response);

                    var trackids = "";
                    var i=0;
                    $( "div[data-track-id]" ).each(function(){
                        if(i>0){
                        trackids += ",";
                        }
                        trackids += $(this).attr( 'data-track-id' );
                        i++;
                    });
                        var testdata = $(this).data('test');

                                $.ajax({
                                    url: 'https://api.spotify.com/v1/audio-features?ids=' + trackids,
                                    headers: {'Authorization': bearer},
                                    success: function (features) {
                                        console.log("success audio: " + features);
                                        //audPlaceholder.innerHTML = templateaud(features);
                                for(var feature in features){
                                var feat = "";
                                feat +="Danceability: " + feature.danceability + "/r";
                                feat +="Energy: " + feature.energy + "/r";
                                feat +="Loudness: " + feature.loudness + "/r";
                                feat +="Mode: " + feature.mode + "/r";
                                feat +="Speechiness: " + feature.speechiness + "/r";
                                feat +="Acousticness: " + feature.acousticness + "/r";
                                feat +="Instrumentalness: " + feature.instrumentalness + "/r";
                                feat +="Liveness: " + feature.liveness + "/r";
                                feat +="Valence: " + feature.valence + "/r";
                                feat +="Tempo: " + feature.tempo + "/r";
                                console.log("feature: " + feat);
                                var findtrack = '#' + feature.id;
                                $(findtrack).find("title-"+feature.id).attr("title",feat);
                                console.dir($(findtrack).find("title-"+feature.id));
                                //console.debug($("#results").find(findtrack));
                                }

                                    }
                                });

                        $(this).val(testdata);

                        console.log( "ready!" );
                }
            });
        };

        var searchPlaylists = function () {
            console.log("looking for playlists");
            console.log("access token in playlists: " + bearer);
            $.ajax({
                url: 'https://api.spotify.com/v1/me/playlists',
                headers: {'Authorization': bearer},
                success: function (response) {
                    playlistresPlaceholder.innerHTML = templateplay(response);
                    console.log("success play: " + playlistresPlaceholder.innerHTML );
                }
            });
        };

        results.addEventListener('click', function (e) {
            var target = e.target;
            if (target !== null && target.classList.contains('cover')) {
                if (target.classList.contains(playingCssClass)) {
                    audioObject.pause();
                } else {
                    if (audioObject) {
                        audioObject.pause();
                    }
                    fetchTracks(target.getAttribute('data-album-id'), function (data) {
                        var preview = data.tracks.items[0].preview_url;
                        if(preview != null){
                        audioObject = new Audio(preview);
                        audioObject.play();
                        target.classList.add(playingCssClass);
                        audioObject.addEventListener('ended', function () {
                            target.classList.remove(playingCssClass);
                        });
                        audioObject.addEventListener('pause', function () {
                            target.classList.remove(playingCssClass);
                        });
                        } else {
                            target.classList.add(noplayingClass);
                        }
                    });
                }
            }
        });

        Handlebars.registerHelper('trimString', function(passedString) {
        console.log("before trimstring");
            var len = passedString.length;
            var add = "";
            if(len > 24){
                add = "...";
            }
            var theString = passedString.substring(0,25) + add;
            
            console.log("theString is: " + theString);
            return new Handlebars.SafeString(theString)
        });

        Handlebars.registerHelper('test', function(trackid) {
            console.log("before fetch audio features");
            var i = fetchAudioFeature(trackid);
            console.log("I is: " + i);
            return new Handlebars.SafeString(i);
        });

        Handlebars.registerHelper('displayTitle', function(features) {
            var feat = "";
            feat +="Danceability: " + features.danceability + "/r";
            feat +="Energy: " + features.energy + "/r";
            feat +="Loudness: " + features.loudness + "/r";
            feat +="Mode: " + features.mode + "/r";
            feat +="Speechiness: " + features.speechiness + "/r";
            feat +="Acousticness: " + features.acousticness + "/r";
            feat +="Instrumentalness: " + features.instrumentalness + "/r";
            feat +="Liveness: " + features.liveness + "/r";
            feat +="Valence: " + features.valence + "/r";
            feat +="Tempo: " + features.tempo + "/r";
            console.log("features: " + feat);
            return new Handlebars.SafeString(feat)
        });

        document.getElementById('search-form').addEventListener('submit', function (e) {
            e.preventDefault();
            document.getElementById('addtoplaylist').style.display = "block";
            searchAlbums(document.getElementById('query').value);
            searchPlaylists();
        }, false);


